@echo off
setlocal enabledelayedexpansion

REM ============================================================================
REM RF4S UI Production Setup Script
REM 
REM This script sets up the complete RF4S UI environment including:
REM - Python environment validation
REM - Dependency installation
REM - Directory structure creation
REM - Configuration setup
REM - Auto-diagnostics execution
REM - GitHub integration preparation
REM ============================================================================

echo.
echo ========================================
echo RF4S UI Production Setup
echo ========================================
echo.

REM Check if Python is installed
python --version >nul 2>&1
if errorlevel 1 (
    echo ERROR: Python is not installed or not in PATH
    echo Please install Python 3.8+ and add it to your PATH
    pause
    exit /b 1
)

REM Get Python version
for /f "tokens=2" %%i in ('python --version 2^>^&1') do set PYTHON_VERSION=%%i
echo Python version: %PYTHON_VERSION%

REM Check Python version (basic check for 3.x)
echo %PYTHON_VERSION% | findstr /r "^3\." >nul
if errorlevel 1 (
    echo ERROR: Python 3.x required, found %PYTHON_VERSION%
    pause
    exit /b 1
)

echo.
echo Installing/Upgrading core packages...
python -m pip install wheel setuptools pip --upgrade --quiet
if errorlevel 1 (
    echo ERROR: Failed to upgrade pip/setuptools
    pause
    exit /b 1
)

echo.
echo Installing RF4S UI dependencies...
if exist "rf4s_ui\requirements.txt" (
    python -m pip install -r rf4s_ui\requirements.txt --quiet
) else if exist "requirements.txt" (
    python -m pip install -r requirements.txt --quiet
) else (
    echo WARNING: No requirements.txt found, installing essential packages...
    python -m pip install PyQt6 PyQt-Fluent-Widgets watchdog psutil Pillow numpy loguru --quiet
)

if errorlevel 1 (
    echo ERROR: Failed to install dependencies
    echo Trying with verbose output...
    python -m pip install -r rf4s_ui\requirements.txt
    pause
    exit /b 1
)

echo.
echo Creating directory structure...

REM Create essential directories
if not exist "screenshots" mkdir screenshots
if not exist "logs" mkdir logs
if not exist "config" mkdir config
if not exist "temp" mkdir temp
if not exist "docs" mkdir docs
if not exist "data" mkdir data

REM Create RF4S UI specific directories
if not exist "rf4s_ui\logs" mkdir rf4s_ui\logs
if not exist "rf4s_ui\temp" mkdir rf4s_ui\temp
if not exist "rf4s_ui\data" mkdir rf4s_ui\data
if not exist "rf4s_ui\docs\auto_generated" mkdir rf4s_ui\docs\auto_generated
if not exist "rf4s_ui\scripts\logs" mkdir rf4s_ui\scripts\logs

echo Directory structure created successfully.

echo.
echo Setting up configuration files...

REM Copy default config if it doesn't exist
if not exist "config.yaml" (
    if exist "rf4s\config\config.yaml" (
        copy "rf4s\config\config.yaml" "config.yaml" >nul
        echo Default config copied from RF4S installation.
    ) else (
        echo Creating default config.yaml...
        echo # RF4S UI Configuration > config.yaml
        echo # Auto-generated by setup script >> config.yaml
        echo version: "1.0.0" >> config.yaml
        echo ui_mode: "pyqt" >> config.yaml
        echo auto_diagnostics: true >> config.yaml
    )
)

REM Create RF4S UI specific config
if not exist "rf4s_ui\config.json" (
    echo Creating RF4S UI configuration...
    echo { > rf4s_ui\config.json
    echo   "version": "1.0.0", >> rf4s_ui\config.json
    echo   "created_by": "RF4S UI Setup", >> rf4s_ui\config.json
    echo   "created_at": "%date% %time%", >> rf4s_ui\config.json
    echo   "auto_diagnostics": true, >> rf4s_ui\config.json
    echo   "auto_documentation": true, >> rf4s_ui\config.json
    echo   "issue_detection": true, >> rf4s_ui\config.json
    echo   "memory_management": true >> rf4s_ui\config.json
    echo } >> rf4s_ui\config.json
)

echo.
echo Running auto-diagnostics...
if exist "rf4s_ui\scripts\auto_diagnostics.py" (
    python rf4s_ui\scripts\auto_diagnostics.py
    if errorlevel 1 (
        echo WARNING: Auto-diagnostics completed with issues
        echo Check the diagnostic report for details
    ) else (
        echo Auto-diagnostics completed successfully
    )
) else (
    echo WARNING: Auto-diagnostics script not found
)

echo.
echo Checking Git repository status...
git status >nul 2>&1
if errorlevel 1 (
    echo Initializing Git repository...
    git init
    if not exist ".gitignore" (
        echo Creating .gitignore...
        echo __pycache__/ > .gitignore
        echo *.pyc >> .gitignore
        echo *.pyo >> .gitignore
        echo *.pyd >> .gitignore
        echo .Python >> .gitignore
        echo env/ >> .gitignore
        echo venv/ >> .gitignore
        echo .venv/ >> .gitignore
        echo pip-log.txt >> .gitignore
        echo pip-delete-this-directory.txt >> .gitignore
        echo .tox/ >> .gitignore
        echo .coverage >> .gitignore
        echo .pytest_cache/ >> .gitignore
        echo *.log >> .gitignore
        echo *.tmp >> .gitignore
        echo temp/ >> .gitignore
        echo .DS_Store >> .gitignore
        echo Thumbs.db >> .gitignore
        echo rf4s_ui/logs/ >> .gitignore
        echo rf4s_ui/temp/ >> .gitignore
        echo rf4s_ui/data/memory.db >> .gitignore
    )
) else (
    echo Git repository already initialized
)

echo.
echo Validating installation...
python -c "import sys; print(f'Python executable: {sys.executable}')"
python -c "
try:
    import PyQt6
    print('✓ PyQt6 installed')
except ImportError:
    print('✗ PyQt6 not found')

try:
    import qfluentwidgets
    print('✓ PyQt-Fluent-Widgets installed')
except ImportError:
    print('✗ PyQt-Fluent-Widgets not found')

try:
    import watchdog
    print('✓ Watchdog installed')
except ImportError:
    print('✗ Watchdog not found')

try:
    import psutil
    print('✓ psutil installed')
except ImportError:
    print('✗ psutil not found')
"

echo.
echo ========================================
echo Setup completed successfully!
echo ========================================
echo.
echo Next steps:
echo 1. Review the auto-diagnostics report in rf4s_ui/logs/
echo 2. Run: python rf4s_ui/main.py
echo 3. Check the documentation in docs/ folder
echo.
echo For development:
echo - Use 'git checkout -b feature/your-feature' for new features
echo - Commit regularly with descriptive messages
echo - Run auto-diagnostics before major commits
echo.

if "%1"=="--no-pause" goto :end
pause

:end
endlocal